@import './variables';

@mixin flex-between($direction) {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: $direction;
}

@mixin w-h-100 {
  width: 100%;
  height: 100%;
}

@mixin w-h-option($height, $width) {
  width: $height;
  min-width: $height;
  height: $width;
  min-height: $width;
}

@mixin w-h-same-size($size) {
  @include w-h-option($size, $size);
}

@mixin font-size($size) {
  font-size: ($size / $main-font-size) * 1rem;
}

@mixin top-bottom-left-right-all-0 {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

@mixin padding-margin-rendering-rem($type, $direction) {
  $limit: 50;
  $type-shortcut: p;
  $step: 0.1;

  // Select padding or margin
  @if ($type) == padding {
    $type-shortcut: p;
  } @else {
    $type-shortcut: m;
  }

  // Render
  @for $i from 0 through $limit {
    @if $direction == all {
      .#{$type-shortcut}-#{$i * $step} {
        #{$type}: $i * $step * 1rem !important;
      }
    } @else if $direction == right {
      .#{$type-shortcut}r-#{$i * $step} {
        #{$type}-right: $i * $step * 1rem !important;
      }
    } @else if $direction == left {
      .#{$type-shortcut}l-#{$i * $step} {
        #{$type}-left: $i * $step * 1rem !important;
      }
    } @else if $direction == top {
      .#{$type-shortcut}t-#{$i * $step} {
        #{$type}-top: $i * $step * 1rem !important;
      }
    } @else if $direction == bottom {
      .#{$type-shortcut}b-#{$i * $step} {
        #{$type}-bottom: $i * $step * 1rem !important;
      }
    } @else if $direction == x {
      .#{$type-shortcut}b-#{$i * $step} {
        #{$type}-left: $i * $step * 1rem !important;
        #{$type}-right: $i * $step * 1rem !important;
      }
    } @else if $direction == y {
      .#{$type-shortcut}b-#{$i * $step} {
        #{$type}-top: $i * $step * 1rem !important;
        #{$type}-bottom: $i * $step * 1rem !important;
      }
    }
  }
}

@mixin padding-margin-rendering-px($type, $direction) {
  $limit: 50;
  $type-shortcut: p;
  $step: 1;

  // Select padding or margin
  @if ($type) == padding {
    $type-shortcut: p;
  } @else {
    $type-shortcut: m;
  }

  // Render
  @for $i from 0 through $limit {
    @if $direction == all {
      .#{$type-shortcut}-#{$i * $step} {
        #{$type}: $i * $step * 1px !important;
      }
    } @else if $direction == right {
      .#{$type-shortcut}r-#{$i * $step} {
        #{$type}-right: $i * $step * 1px !important;
      }
    } @else if $direction == left {
      .#{$type-shortcut}l-#{$i * $step} {
        #{$type}-left: $i * $step * 1px !important;
      }
    } @else if $direction == top {
      .#{$type-shortcut}t-#{$i * $step} {
        #{$type}-top: $i * $step * 1px !important;
      }
    } @else if $direction == bottom {
      .#{$type-shortcut}b-#{$i * $step} {
        #{$type}-bottom: $i * $step * 1px !important;
      }
    } @else if $direction == x {
      .#{$type-shortcut}b-#{$i * $step} {
        #{$type}-left: $i * $step * 1px !important;
        #{$type}-right: $i * $step * 1px !important;
      }
    } @else if $direction == y {
      .#{$type-shortcut}b-#{$i * $step} {
        #{$type}-top: $i * $step * 1px !important;
        #{$type}-bottom: $i * $step * 1px !important;
      }
    }
  }
}

@mixin font-size-rendering {
  $limit: 30;
  $step: 0.1;

  @for $i from 0 through $limit {
    .fs-#{$i} {
      font-size: $i * $step * 1rem;
    }
  }
}

@mixin font-weight-rendering {
  $limit: 9;

  @for $i from 1 through $limit {
    .fw-#{$i} {
      font-weight: $i * 100;
    }
  }
}

:root {
  --bg-color: red;
}

@function alpha($color, $opacity) {
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color});
  @return hsla($color-h, $opacity);
}

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin text-color-dynamic($color) {
  @if (lightness($color) > 50) {
    color: $lqh-black;
  } @else {
    color: $lqh-white;
  }
}

@mixin box-shadow-btn($color) {
  box-shadow: 0px 3px 4px $color;
}

@mixin box-shadow-btn-sm($color) {
  box-shadow: 0px 1px 3px $color;
}

@mixin padding-x($val) {
  padding: {
    left: $val;
    right: $val;
  }
}

@mixin padding-y($val) {
  padding: {
    top: $val;
    bottom: $val;
  }
}

@mixin gender-toggle($bgColor) {
  box-shadow: none;
  .mat-button-toggle {
    border: 0;
    @include w-h-same-size(51px);
    @extend .flex-between;

    border: transparent solid 2px;
    border-radius: 4px;

    .mat-button-toggle-ripple {
      border-radius: 4px;
    }

    .mat-button-toggle-label-content {
      padding: 0;
    }

    &:nth-child(1) {
      margin-right: 20px;
    }

    &.male {
      background-color: $bgColor;
      transition: all 0.2s;

      &.mat-button-toggle-checked {
        @extend .primary-shadow;
        background-color: $lqh-primary;
        border-color: $lqh-primary;
      }
    }

    &.female {
      background-color: $bgColor;
      transition: all 0.2s;

      &.mat-button-toggle-checked {
        @extend .accent-shadow;
        background-color: $lqh-accent;
        border-color: $lqh-accent;
      }
    }
  }
}
